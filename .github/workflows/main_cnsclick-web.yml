# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
name: Build and deploy Node.js app to Azure Web App - cnsclick-web

on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  ZIP_NAME: nextapp.zip
  NEXT_PUBLIC_API_BASE_URL: https://cnsclick-api.azurewebsites.net

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install, build, and test
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present

      - name: Check if .next folder exists
        run: |
          if [ -d ".next" ]; then
            echo "✅ .next folder found. Here's what's inside:"
            ls -R .next
          else
            echo "❌ .next folder not found."
            exit 1
          fi

      - name: Copy standalone folder
        run: |
          # Ensure standalone directory exists
          if [ ! -d ".next/standalone" ]; then
            echo "Error: .next/standalone directory not found. Make sure Next.js build created standalone output."
            exit 1
          fi

          # Copy public folder to standalone
          if [ -d "public" ]; then
            echo "Copying public folder..."
            cp -R ./public ./.next/standalone/public
          else
            echo "Warning: public folder not found"
          fi

          # Copy static folder to standalone
          if [ -d ".next/static" ]; then
            echo "Copying static folder..."
            mkdir -p ./.next/standalone/.next
            cp -R ./.next/static ./.next/standalone/.next/static
          else
            echo "Warning: .next/static folder not found"
          fi

      - name: Create deployment package
        run: |
          # Create package directory
          mkdir -p package

          # Copy all standalone files to package (including hidden files)
          echo "Copying standalone files to package..."
          cp -R .next/standalone/* package/
          cp -R .next/standalone/.* package/ 2>/dev/null || true

          # CRITICAL: Ensure .next folder exists in package
          mkdir -p package/.next

          # Copy the entire .next folder structure to package
          if [ -d ".next" ]; then
            echo "Copying .next folder structure..."
            # Copy static assets
            if [ -d ".next/static" ]; then
              cp -R .next/static package/.next/static
            fi
            # Copy server chunks and other .next contents
            if [ -d ".next/server" ]; then
              cp -R .next/server package/.next/server
            fi
            # Copy any other .next contents that might be needed
            for item in .next/*; do
              if [ -f "$item" ] || [ -d "$item" ]; then
                basename_item=$(basename "$item")
                if [ "$basename_item" != "standalone" ]; then
                  cp -R "$item" "package/.next/"
                fi
              fi
            done
          fi

          # Verify critical files exist
          echo "Verifying package contents..."
          if [ ! -f "package/server.js" ]; then
            echo "Warning: server.js not found in standalone build"
          fi

          if [ ! -f "package/package.json" ]; then
            echo "Warning: package.json not found in standalone build"
          fi

          if [ ! -d "package/.next" ]; then
            echo "Error: .next folder missing from package"
            exit 1
          else
            echo ".next folder successfully copied to package"
            ls -la package/.next/
          fi

      - name: Create ZIP artifact
        run: |
          cd package
          echo "Creating ZIP file..."
          zip -r ../app.zip . -x "*.git*" "node_modules/*" "*.DS_Store*"
          cd ..

          # Verify ZIP was created
          if [ ! -f "app.zip" ]; then
            echo "Error: app.zip was not created"
            exit 1
          fi

          echo "ZIP file created successfully. Size:"
          ls -lh app.zip

      - name: Inspect ZIP contents
        run: |
          echo "Listing contents of app.zip (first 30 entries):"
          unzip -l app.zip | head -30
          echo "..."
          echo "Total entries in ZIP:"
          unzip -l app.zip | tail -1

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ./

      - name: Unzip deployment package
        run: |
          echo "Files in current directory:"
          ls -la

          # Verify app.zip exists
          if [ ! -f "app.zip" ]; then
            echo "Error: app.zip not found!"
            exit 1
          fi

          # Create deployment directory
          mkdir -p deployment

          # Extract ZIP contents
          echo "Extracting app.zip..."
          unzip -q app.zip -d deployment/

          # Verify extraction
          echo "Contents of deployment directory:"
          ls -la deployment/

          # Check for critical files
          if [ ! -f "deployment/server.js" ]; then
            echo "Warning: server.js not found in extracted files"
          fi

          if [ ! -d "deployment/.next" ]; then
            echo "Warning: .next folder not found in extracted files"
          else
            echo ".next folder found in deployment"
            ls -la deployment/.next/
          fi

      # - name: Unzip artifact for deployment
      #   run: unzip app.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_84D51615455148859A3FE23E4ABF79F7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0993BE89D9AA4E45A7A6EE08AE3542F4 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_A2ED51F936DE469B8F1A011FB06A2AF4 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'cnsclick-web'
          slot-name: 'Production'
          package: ./deployment
